from sqlalchemy import (
    Column,
    String,
    Text,
    Enum,
    ForeignKey,
    Integer,
    CheckConstraint,
    Boolean,
    create_engine,
    TIMESTAMP,
)

import enum
from datetime import datetime
from sqlalchemy.orm import DeclarativeBase, relationship, sessionmaker
from nanoid import generate
import os
from bcrypt import hashpw, gensalt
from dataclasses import dataclass


current_dir = os.path.dirname(os.path.abspath(__file__))
DATABASE_URL = f"sqlite:///{current_dir}/household.db"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)


@dataclass
class Base(DeclarativeBase):
    __abstract__ = True
    id: str = Column(String, primary_key=True, default=generate, unique=True)
    date_created: datetime = Column(
        TIMESTAMP, nullable=False, default=datetime.utcnow)
    date_updated: datetime = Column(
        TIMESTAMP, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow
    )


class UserTypes(enum.Enum):
    ADMIN = "admin"
    USER = "user"


class RequestStatus(enum.Enum):
    REQUESTED = "requested"
    ASSIGNED = "assigned"
    REJECTED = "rejected"
    COMPLETED = "complete"


@dataclass
class User(Base):
    __tablename__ = "users"
    user_type: UserTypes = Column(
        Enum(UserTypes), nullable=False, default=UserTypes.USER)
    name: str = Column(String, nullable=False)
    password: str = Column(String, nullable=False)
    email: str = Column(String, nullable=False, unique=True)
    address: str = Column(Text, nullable=True)
    pincode: int = Column(Integer, nullable=True)
    is_blocked: Boolean = Column(Boolean, nullable=False, default=False)


class ServiceProfessional(Base):
    __tablename__ = "service_professionals"
    name = Column(String, nullable=False)
    email = Column(String, nullable=False, unique=True)
    password = Column(String, nullable=False)
    address = Column(Text, nullable=False)
    pincode = Column(Integer, nullable=False)
    proof_document = Column(Text, nullable=False)
    description = Column(Text, nullable=True)
    experience = Column(Integer, nullable=False)
    is_approved = Column(Boolean, nullable=False, default=False)
    is_blocked = Column(Boolean, nullable=False, default=False)
    service_type = Column(String, ForeignKey(
        "service_types.id"), nullable=False)


@dataclass
class ServiceType(Base):
    __tablename__ = "service_types"
    name: str = Column(String, nullable=False)


class Service(Base):
    __tablename__ = "services"
    name = Column(String, nullable=False)
    price = Column(Integer, nullable=False)
    time_required = Column(Integer, nullable=False)
    description = Column(Text, nullable=True)
    service_type = Column(String, ForeignKey(
        "service_types.id"), nullable=False)


class Review(Base):
    __tablename__ = "reviews"
    user_id = Column(String, ForeignKey("users.id"), nullable=False)
    service_professional_id = Column(
        String, ForeignKey("service_professionals.id"), nullable=False
    )
    rating = Column(Integer, nullable=False)
    review = Column(Text, nullable=True)
    request_id = Column(String, ForeignKey(
        "service_requests.id"), nullable=False)


class ServiceRequest(Base):
    __tablename__ = "service_requests"
    user_id = Column(String, ForeignKey("users.id"), nullable=False)
    service_professional_id = Column(
        String, ForeignKey("service_professionals.id"), nullable=False
    )
    request_status = Column(
        Enum(RequestStatus), nullable=False, default=RequestStatus.REQUESTED
    )
    date_completed = Column(TIMESTAMP, nullable=True)


Base.metadata.create_all(bind=engine)


def create_default_user():
    db_session = SessionLocal()
    existing_user = db_session.query(User).filter_by(
        email='admin@household.com').first()

    if not existing_user:
        try:
            new_user = User(
                name="admin",
                password=hashpw("admin".encode("utf-8"), gensalt()),
                email="admin@household.com",
                user_type=UserTypes.ADMIN,
            )

            db_session.add(new_user)

            db_session.commit()
        except Exception as e:
            db_session.rollback()
            print(f"An error occurred: {e}")

    db_session.close()


def create_service_types():
    db_session = SessionLocal()

    s_types = ["Cleaning", "Salon", "Electrician",
               "Plumbing", "Painting", "Gardening", "Cooking"]

    for s in s_types:
        # Check if the service type already exists
        existing_service_type = db_session.query(
            ServiceType).filter_by(name=s).first()

        if not existing_service_type:
            # If it doesn't exist, add it
            service_type = ServiceType(name=s)
            db_session.add(service_type)

    # Commit the changes and close the session
    db_session.commit()
    db_session.close()


create_default_user()
create_service_types()
